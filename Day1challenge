/**
 * Day 1 of 30: Sort an Array of 0s, 1s, and 2s
 * Problem: Rearrange an array containing only 0s, 1s, and 2s in ascending order.
 * Constraint: Must be done in O(n) time and O(1) extra space (in-place sorting).
 * Approach: Dutch National Flag Algorithm
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 */
public class SortColors {
    
    public static void sortColors(int[] arr) {
        int low = 0, mid = 0, high = arr.length - 1;

        while (mid <= high) {
            if (arr[mid] == 0) {
                swap(arr, low, mid);
                low++;
                mid++;
            } else if (arr[mid] == 1) {
                mid++;
            } else { // arr[mid] == 2
                swap(arr, mid, high);
                high--;
            }
        }
    }

    // Utility method to swap two elements in an array
    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Main method for testing
    public static void main(String[] args) {
        int[] arr = {0, 1, 2, 1, 0, 2, 1, 0};

        System.out.print("Original array: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }

        sortColors(arr);

        System.out.print("\nSorted array:   ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
